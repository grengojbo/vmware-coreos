#!/bin/bash
#
# This script is designed to be run inside the container
#

# /usr/share/oem/cloud-config.yml
# fail hard and fast even on pipelines
# cat ~/.ssh/master.pub >> ~/.ssh/authorized_keys
set -eo pipefail

help() {
  echo ............................................................
  echo "Install CoreOS to ESXI Host"
  echo "Run : w-coreos install <WMvare Host> <CoreOS Host> [cache|clean]"
  echo "Example: w-coreos install esxi/vmware01.sh host/test01.sh"
  echo ............................................................
  echo "Run : w-coreos gen <CoreOS Host>"
  echo "Example: w-coreos gen host/test01.sh"
  echo ............................................................
  echo "Run : w-coreos deploy <CoreOS Host>"
  echo "Example: w-coreos deploy host/test01.sh"
  echo ............................................................
  echo "Run : w-coreos update <CoreOS Host>"
  echo "Example: w-coreos update host/test01.sh"
  echo ............................................................
  echo "Run : w-coreos ssh <CoreOS Host>"
  echo "Example: w-coreos ssh host/test01.sh"
  echo ............................................................
  exit 1
}
if [[ -z $1 ]]; then
  # is not set $1
  help
fi

mkdir -p ./keys
mkdir -p ./cloud-config
mkdir -p ./esxi
mkdir -p ./host

if [[ ! -f ./keys/token ]]; then
  echo "Generate token keys/token ..."
  DISCOVERY_TOKEN_NEW=`curl -s https://discovery.etcd.io/new`
  echo $DISCOVERY_TOKEN_NEW > ./keys/token
  # DISCOVERY_TOKEN_FILE=
fi

if [[ $1 == "install" ]]; then
  if [[ -z $2 ]]; then
    echo "VMware Host is not set."
    exit 1
  fi
  if [[ -z $3 ]]; then
    echo "CoreOS Host is not set."
    exit 1
  fi
  
  WF=${2}
  HF=${3}
  if [[ ! -f $WF ]]; then
    echo "File: ${WF} not exits..."
    exit 1
  fi
  if [[ ! -f $HF ]]; then
    echo "File: ${HF} not exits..."
    exit 1
  fi
  source ${WF}
  source ${HF}
  #chmod 0755 ./coreos_deploy_on_esxi.sh
  scp ./${WF} ${VM_SSH}:${DATASTORE_PATH}/${VM_HOST_NAME}.sh
  scp ./${HF} ${VM_SSH}:${DATASTORE_PATH}/${H_NAME}.sh
  scp ./coreos_deploy_on_esxi.sh ${VM_SSH}:${DATASTORE_PATH}/
  if [[ -z $4 ]]; then
    ssh ${VM_SSH} -C "cd ${DATASTORE_PATH}/ && ./coreos_deploy_on_esxi.sh ${VM_HOST_NAME} ${H_NAME}"
  else
    ssh ${VM_SSH} -C "cd ${DATASTORE_PATH}/ && ./coreos_deploy_on_esxi.sh ${VM_HOST_NAME} ${H_NAME} $4"
  fi

  VM_INFO=`ssh ${VM_SSH} -C "vim-cmd vmsvc/getallvms | grep ${H_NAME}"`
  VM_ID=`echo ${VM_INFO} | awk '{print $1}'`
  echo Added VM_ID=${VM_ID} to ${HF}
  echo "" >> ${HF}
  echo "ESXI=\"${WF}\"" >> ${HF}
  echo "VM_ID=${VM_ID}" >> ${HF}
  ssh ${VM_SSH} -C "rm ${DATASTORE_PATH}/${VM_HOST_NAME}.sh"  
  ssh ${VM_SSH} -C "rm ${DATASTORE_PATH}/${H_NAME}.sh"  
  ssh ${VM_SSH} -C "rm ${DATASTORE_PATH}/coreos_deploy_on_esxi.sh"  
  exit 1
fi

if [[ $1 == "deploy" ]]; then
  if [[ -z $2 ]]; then
    echo "CoreOS Host is not set."
    exit 1
  fi
  HF=${2}
  if [[ ! -f ${HF} ]]; then
    echo "File: ${HF} not exits..."
    exit 1
  fi
  source ${HF}
  if [[ ! -f ${ESXI} ]]; then
    echo "File: ${ESXI} not exits..."
    exit 1
  fi
  source ${ESXI}
  if [[ ! -f insecure_ssh_key ]]; then
    scp ${VM_SSH}:${DATASTORE_PATH}/${H_NAME}/insecure_ssh_key ./
  fi
  if [[ ! -f cloud-config/${H_NAME}.yml ]]; then
    echo "File: cloud-config/${H_NAME}.yml not exits..."
    exit 1
  fi
  echo "Connect to ${H_IP} ..."
  SSH_GET="ssh -i insecure_ssh_key -o StrictHostKeyChecking=no core@${H_IP}"
  ${SSH_GET} -C "sudo mkdir -p /storage"
  echo "Deploy /usr/share/oem/cloud-config.yml ..."
  cat cloud-config/${H_NAME}.yml | ${SSH_GET} "cat > /home/core/${H_NAME}.yml"
  ${SSH_GET} -C "sudo mv /home/core/${H_NAME}.yml /usr/share/oem/cloud-config.yml"
  if [[ ! -z ${KEY_FILE} ]]; then
    scp -i insecure_ssh_key insecure_ssh_key core@${H_IP}:/home/core/.ssh/id_rsa
  else
    scp -i insecure_ssh_key ${KEY_FILE} core@${H_IP}:/home/core/.ssh/id_rsa
  fi
  ${SSH_GET} -C "sudo cp -R /home/core/.ssh /root/"
  echo "Reboot ${H_IP}"
  ${SSH_GET} -C "sudo reboot"
  # systemctl stop system-cloudinit@usr-share-oem-cloud\x2dconfig.yml.service
  exit 1
fi

if [[ $1 == "update" ]]; then
  if [[ -z $2 ]]; then
    echo "CoreOS Host is not set."
    exit 1
  fi
  HF=${2}
  if [[ ! -f $HF ]]; then
    echo "File: ${HF} not exits..."
    exit 1
  fi
  source ${HF}
  if [[ ! -f cloud-config/${H_NAME}.yml ]]; then
    echo "File: cloud-config/${H_NAME}.yml not exits..."
    exit 1
  fi
  if [[ -f ${KEY_FILE} ]]; then
    echo "Connect to ${H_IP}, key: ${KEY_FILE} ..."
    SSH_GET="ssh -i ${KEY_FILE} -o StrictHostKeyChecking=no core@${H_IP}"
    # SCP_GET="scp -i ${KEY_FILE}"
  else
    echo "Connect to ${H_IP} ..."
    SSH_GET="ssh -o StrictHostKeyChecking=no core@${H_IP}"
    # SCP_GET="scp"
  fi
  cat cloud-config/${H_NAME}.yml | ${SSH_GET} "sudo cat > /usr/share/oem/cloud-config.yml"
  # ${SCP_GET} cloud-config/${H_NAME}.yml core@${H_IP}:/home/core/${H_NAME}.yml
  # echo "Deploy /usr/share/oem/cloud-config.yml ..."
  # ${SSH_GET} -C "sudo mv /home/core/${H_NAME}.yml /usr/share/oem/cloud-config.yml"
  echo "Reboot ${H_IP}"
  ${SSH_GET} -C "sudo reboot"
  exit 1
fi

if [[ $1 == "gen" ]]; then
  if [[ -z $2 ]]; then
    echo "CoreOS Host is not set."
    exit 1
  fi
  HF=${2}
  if [[ ! -f ${HF} ]]; then
    echo "File: ${HF} not exits..."
    exit 1
  fi
  source cluster01.sh
  source ${HF}
  if [[ -z ${DISCOVERY_TOKEN} ]]; then
    DISCOVERY_TOKEN=`cat ./keys/token`
  fi
  # echo "DISCOVERY_TOKEN $DISCOVERY_TOKEN"
  if [[ ! -z ${KEY_PUB_FILE} ]]; then
    KEY_PUB=`cat $KEY_PUB_FILE`
  fi
  if [[ -z ${KEY_PUB} ]]; then
    KEY_PUB=`cat insecure_ssh_key.pub`
  fi
  if [[ -z ${H_TZ} ]]; then
    H_TZ="UTC"
  fi
  # echo "KEY_PUB=$KEY_PUB"
  if [[ -z $H_METADATA ]]; then
    H_METADATA="region=ua,deis=no,router=no,cluster=yes,server=vmware02,host=$H_NAME"
  fi
  source cloud_config.sh
  exit 1
fi

if [[ $1 == "ssh" ]]; then
  if [[ -z $2 ]]; then
    echo "CoreOS Host is not set."
    exit 1
  fi
  HF=${2}
  if [[ ! -f $HF ]]; then
    echo "File: ${HF} not exits..."
    exit 1
  fi
  source ${HF}
  if [[ -f ${KEY_FILE} ]]; then
    echo "Connect to ${H_IP}, key: ${KEY_FILE} ..."
    ssh -i ${KEY_FILE} -o StrictHostKeyChecking=no core@${H_IP}
  else
    echo "Connect to ${H_IP} ..."
    ssh -o StrictHostKeyChecking=no core@${H_IP}
  fi
  exit 1
fi

if [[ $1 == "toolbox" ]]; then
  if [[ -z $2 ]]; then
    echo "CoreOS Host is not set."
    exit 1
  fi
  HF=${2}
  if [[ ! -f $HF ]]; then
    echo "File: ${HF} not exits..."
    exit 1
  fi
  source ${HF}
  if [[ -f ${KEY_FILE} ]]; then
    echo "Connect to ${H_IP}, key: ${KEY_FILE} ..."
    ssh -i ${KEY_FILE} -o StrictHostKeyChecking=no core@${H_IP} -C "/usr/bin/toolbox"
  else
    echo "Connect to ${H_IP} ..."
    ssh -o StrictHostKeyChecking=no core@${H_IP} -C "/usr/bin/toolbox"
  fi
  exit 1
fi

help
